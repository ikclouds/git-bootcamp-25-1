1;What is the primary purpose of Git?;one-choice;1. A version control system for tracking changes in source code!2. A web-based platform for hosting code repositories!3. A programming language for software development!4. A command-line tool for debugging applications!;1
2;How can you verify that Git is correctly installed on your computer?;one-choice;1. Run the command git --version!2. Check the Program Files directory!3. Look for the Git icon on your desktop!4. Restart your computer!;1
3;What is stored in the .git folder?;multiple-choice;1. Technical information for Git to track changes!2. Repository history!3. Version management data!4. Source code backups!5. User credentials!;1,2,3
4;What information does the git status command provide?;multiple-choice;1. Current branch!2. Modified files!3. Staged files!4. Untracked files!5. Remote repository URL!;1,2,3,4
5;What is the difference between git add . and git add filename?;one-choice;1. git add . stages all new and modified files, while git add filename stages only a specific file!2. git add . only works in the root directory, while git add filename works in any directory!3. git add . is deprecated, while git add filename is the recommended approach!4. There is no difference between the two commands!;1
6;Why are commit messages important in Git?;multiple-choice;1. They provide a clear description of changes made!2. They help in understanding project evolution!3. They facilitate collaboration!4. They increase repository size!5. They are required to push changes to remote repositories!;1,2,3
7;What is the purpose of branches in Git?;one-choice;1. To allow independent lines of development without affecting the main codebase!2. To increase the size of the repository!3. To slow down the development process!4. To require more storage space on your computer!;1
8;How do you switch to an existing branch named "feature-x"?;one-choice;1. git branch feature-x!2. git switch feature-x!3. git checkout feature-x!4. git move feature-x!;3
9;What types of files would you typically include in a .gitignore file?;multiple-choice;1. Local configuration files!2. Build artifacts!3. Temporary files!4. Source code files!5. Important documentation!;1,2,3
10;What is the relationship between Git and GitHub?;one-choice;1. Git is a local version control system, while GitHub is a web-based platform for hosting Git repositories!2. Git and GitHub are the same thing!3. Git is owned by GitHub!4. GitHub is a local application that runs Git commands!;1
11;What advantages does Git provide in large-scale software projects?;multiple-choice;1. Enables parallel development through branching!2. Provides complete history tracking and accountability!3. Facilitates collaboration among distributed teams!4. Reduces the need for documentation!5. Eliminates the need for code reviews!;1,2,3
12;What is the correct workflow sequence when making changes to a Git repository?;multiple-choice;1. Make changes to files!2. Stage changes using git add!3. Commit changes with git commit!4. Push changes to remote with git push!5. Create a pull request!;1,2,3,4
13;What is the difference between git checkout and git checkout -b commands?;multiple-choice;1. git checkout switches to an existing branch!2. git checkout -b creates a new branch and switches to it!3. git checkout requires the branch to exist already!4. git checkout -b combines branch creation and switching in one command!5. git checkout can only be used with remote branches!;1,2,3,4
14;What steps are involved in merging branches and resolving conflicts?;multiple-choice;1. Switch to the target branch using git checkout!2. Use git merge to bring in changes from another branch!3. Manually edit files to resolve conflicts when they occur!4. Use git add to mark conflicts as resolved!5. Complete the merge with git merge --continue!;1,2,3,4
15;What are the correct steps to connect a local Git repository to GitHub?;multiple-choice;1. Create a new repository on GitHub!2. Copy the repository URL from GitHub!3. Use git remote add origin <URL> to connect your local repo!4. Push local content with git push -u origin main!5. Fork the repository first, then clone it!;1,2,3,4
16;What is Git?;one-choice;1. A web-based hosting service for version control!2. A distributed version control system for tracking changes in source code!3. A programming language for developing applications!4. A tool for deploying applications to servers!;2
17;What is GitHub?;one-choice;1. A web-based platform for version control and collaboration, providing hosting for Git repositories!2. A local version control system installed on your computer!3. A command-line interface for Git commands!4. A desktop application for managing local files!;1
18;What is a Repository (Repo)?;one-choice;1. A programming language for developing Git-based applications!2. A command to initialize Git in a directory!3. A storage location where all the files for a project, along with their revision history, are kept!4. A type of branch in Git!;3
19;What is a Version Control System (VCS)?;one-choice;1. A tool for compiling source code into executable files!2. A method for organizing files in directories!3. A system that records changes to files over time so you can recall specific versions later!4. A system for managing database versions!;3
20;What does `git init` do?;one-choice;1. Initializes a new project with template files!2. Installs Git on your computer!3. Connects to a remote repository!4. Creates a new Git repository by creating the hidden .git folder!;4
21;What is the Terminal/Console in relation to Git?;one-choice;1. A command-line interface used to interact with the operating system and run Git commands!2. A graphical user interface for Git!3. A remote server for hosting Git repositories!4. A visualization tool for Git branches!;1
22;What does the command `git --version` do?;one-choice;1. Updates Git to the latest version!2. Checks the installed version of Git!3. Shows the version history of your repository!4. Displays the version of your project!;2
23;What does the command `git --help` do?;one-choice;1. Connects you to online Git documentation!2. Provides troubleshooting for Git errors!3. Shows the help file for your repository!4. Displays a list of common Git commands and options!;4
24;What does `git status` show?;multiple-choice;1. Which branch you are on!2. Which files have been modified!3. Which files are staged for the next commit!4. Which files are untracked!5. The commit history of your repository!;1,2,3,4
25;What are Untracked Files in Git?;one-choice;1. Files that have been deleted from your repository!2. Files that are ignored by Git!3. Files in your working directory that Git is not currently monitoring!4. Files that are staged for commit!;3
26;What is the Staging Area (Index) in Git?;one-choice;1. A place where Git stores the repository history!2. An intermediate area where changes are prepared before being committed to the repository!3. A temporary storage for merge conflicts!4. A remote server location!;2
27;What does `git add <filename>` do?;one-choice;1. Creates a new file in your repository!2. Adds a file directly to your repository without staging!3. Adds a specific file to the staging area!4. Marks a file to be ignored by Git!;3
28;What does `git add .` do?;one-choice;1. Adds only the current directory to the staging area!2. Adds all new and modified files in the current directory and its subdirectories to the staging area!3. Creates a new repository!4. Adds all files including those listed in .gitignore!;2
29;What is a Commit in Git?;one-choice;1. A message describing changes made to files!2. A branch in your repository!3. A snapshot of your repository at a specific point in time, recording staged changes!4. A connection to a remote repository!;3
30;What does `git commit -m "message"` do?;one-choice;1. Modifies the last commit message!2. Creates a new branch with the given message!3. Sends commits to a remote repository!4. Saves staged changes to the repository with a descriptive message!;4
31;What is a Commit Hash?;one-choice;1. A unique identifier assigned to each commit, allowing you to refer to specific versions of your project!2. A security feature to prevent unauthorized access to your repository!3. A method for encrypting commit messages!4. A way to categorize commits by type!;1
32;What is a Branch in Git?;one-choice;1. A fork of an entire repository!2. An independent line of development within a Git repository!3. A specific version of a file!4. A type of remote repository!;2
33;What does `git branch` do?;one-choice;1. Creates a new branch!2. Deletes a branch!3. Merges branches together!4. Lists existing branches in the repository, with the current branch highlighted!;4
34;What does `git branch <branch-name>` do?;one-choice;1. Creates a new branch!2. Switches to the specified branch!3. Deletes the specified branch!4. Renames an existing branch!;1
35;What does `git checkout <branch-name>` do?;one-choice;1. Creates a new branch!2. Switches from the current branch to another existing branch!3. Deletes a branch!4. Shows the commit history of a branch!;2
36;What does `git checkout -b <new-branch-name>` do?;one-choice;1. Creates a new branch but stays on the current branch!2. Deletes a branch and creates a new one!3. Creates a new branch and immediately switches to it!4. Renames the current branch!;3
37;What does `git branch -d <branch-name>` do?;one-choice;1. Creates a new branch!2. Deletes a specified branch!3. Switches to the specified branch!4. Displays information about the branch!;2
38;What is a `.gitignore` file?;one-choice;1. A special file that tells Git which files or directories to ignore and not track!2. A file containing Git configuration settings!3. A file listing all branches in the repository!4. A file documenting the repository structure!;1
39;What does `git merge <branch-name>` do?;one-choice;1. Creates a new branch combining two existing branches!2. Deletes a branch after copying its contents!3. Integrates changes from a specified branch into the current branch!4. Compares differences between branches!;3
40;What is a Remote Repository?;one-choice;1. A version of your repository hosted on the internet or network, accessible by multiple collaborators!2. A local backup of your repository!3. A temporary storage location for commits!4. A branch that exists only on your local machine!;1
41;What does `git config --global user.name "Your Name"` do?;one-choice;1. Changes your operating system username!2. Sets your GitHub account name!3. Creates a new user profile!4. Sets your global Git username for commits!;4
42;What does `git config --global user.email "your.email@example.com"` do?;one-choice;2. Updates your email on GitHub!1. Sets your global Git email for commits!3. Sends an email notification about your repository!4. Creates a new email account!;2
43;What does `git remote add origin <URL>` do?;one-choice;1. Creates a new local repository!3. Connects to a different branch!3. Changes the URL of an existing remote!4. Adds a new remote repository, typically named "origin," with a specified URL!;4
44;What does `git push -u origin <branch-name>` do?;multiple-choice;1. Pushes local commits to a remote repository!2. Sets the upstream tracking branch!3. Creates a new branch on the remote repository!4. Deletes the local branch after pushing!5. Merges the branch with the main branch!;1,2
45;What does `git push` do?;one-choice;1. Updates your local repository with changes from the remote!2. Creates a new commit!3. Sends committed changes from your local repository to the remote repository!4. Saves changes to the staging area!;3
46;What does `git clone <URL>` do?;one-choice;1. Creates a new remote repository!2. Creates a local copy of an existing remote repository!3. Connects your local repository to a remote one!4. Duplicates a local branch!;2
47;What does `git pull` do?;one-choice;1. Uploads local changes to a remote repository!2. Creates a pull request on GitHub!3. Fetches and integrates changes from a remote repository into your current local branch!4. Shows differences between local and remote repositories!;3
48;What is the difference between "origin" and "upstream" in Git?;one-choice;1. They are different names for the same repository!2. Origin typically refers to your fork, while upstream refers to the original repository you forked from!3. Origin is a local repository, while upstream is remote!4. Upstream is always the main branch, while origin can be any branch!;2
49;How do you add an upstream remote to a forked repository?;one-choice;1. git remote add upstream <original-repo-url>!2. git upstream add <original-repo-url>!3. git add upstream <original-repo-url>!4. git remote upstream <original-repo-url>!;1
50;How do you fetch updates from an upstream repository?;one-choice;1. git pull upstream!2. git fetch upstream!3. git update upstream!4. git sync upstream!;2
51;When would you typically need to work with both origin and upstream remotes?;one-choice;1. When working on a solo project!2. Only when using GitHub, not with other Git hosting services!3. When working with binary files!4. When contributing to open-source projects using the fork and pull request workflow!;4
52;How do you push changes to your origin after merging from upstream?;one-choice;1. git push origin <branch-name>!2. git push upstream <branch-name>!3. git push --all!4. git push origin upstream!;1